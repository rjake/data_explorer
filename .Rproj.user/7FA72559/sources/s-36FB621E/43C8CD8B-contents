---
title: "Data Explorer"
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    source_code: embed
    theme: lumen
    vertical_layout: fill
navbar:
  #type: inverse
runtime: shiny
---

```{r css, include = F}
  mycss <- 
    "
    .one_row .shiny-input-container {
      display: inline-block;
      padding-left: 16px;
      width: 95%;
      height: 16px;
    }

    .general .shiny-input-container {
      display: inline-block;
      padding-left: 15px;
      padding-top: 5px;
      width: 90%;
      height: 20px;
    }
  
    .checkboxes .shiny-input-container {
      display: inline-block;
      padding-left: 16px;
      width: 45%;
      height: 8px;
    }
  
    .courier_font .shiny-html-output {
      font-family:courier, courier new, serif;
      padding-left: 16px;
    }

    div.scroll {
        overflow:auto;
    }
  " 
```

```{js navbar_inverse, eval = F}
$('.navbar-inverse').removeClass('navbar-inverse').addClass('navbar-default');
```


```{r workspace}
# load data in 'global' chunk so it can be shared by all users of the dashboard
    library(tidyverse)
    library(lubridate)
    library(DT)
    library(shiny)
    library(shinyWidgets)
    library(odbc)
    #library(shinydashboard)

#custom functions
  date_guess <-
    function(x){
      parse_date_time(x,
                      orders = c("ymd_HMS", "mdy_HM","ymd", "mdy"))#,origin = "1970-01-01")
    }
```

Data Visualization
=====================================

Inputs {.sidebar data-width=500;}
-------------------------------------

```{r get_file}  
fluidRow(tags$style(mycss), span(class = "general",
        fileInput("get_file", label = NULL, 
                             accept = c(".csv", ".sql"))))

get_data <-
    reactive({
        if(is.null(input$get_file)){
            df <- iris
        } else if(grepl(".csv", input$get_file)){
            df <-
                  read.csv(input$get_file$datapath, 
                           stringsAsFactors = T, 
                           na.strings = c('NULL', 'NA')) %>%
                  mutate_at(vars(matches("DATE|DT|_ROOM")), funs(date_guess))
        } else if(grepl(".sql", input$get_file)){
            dbcon <- dbConnect()
            df <- dbGetQuery(dbcon, read_file(input$get_file$datapath))
            dbDisconnect(dbcon)
        }
        return(df)
    })


get_colnames <- reactive({ names(get_data() ) })

```


```{r get_fields}
get_x <- reactive({ ifelse(nchar(input$text_x) > 0, input$text_x, input$x) })
get_y <- reactive({ ifelse(nchar(input$text_y) > 0, input$text_y, input$y) })
get_c <- reactive({ ifelse(nchar(input$text_c) > 0, input$text_c, input$color) })
get_f <- reactive({ ifelse(nchar(input$text_f) > 0, input$text_f, input$fill) })
get_fr <- reactive({ ifelse(nchar(input$text_fr) > 0, input$text_fr, input$facet_row) })
get_fc <- reactive({ ifelse(nchar(input$text_fc) > 0, input$text_fc, input$facet_col) })
facets <-  reactive({ paste(get_fr(), '~', get_fc()) })
get_geom <- 
    reactive({ 
        ifelse(get_y() != '.' && input$chart_type == 'geom_bar', 
               'geom_col', 
               input$chart_type) 
        })

# this will get the row indicies for the filtered data
#'_rows_all' is automatically created from renderDatatable
filtered_data <-
    reactive({
        if(is.null(input$get_table_rows_all)){
            df <- get_data()
        } else {
            df <- get_data() %>% slice(input$get_table_rows_all)      
        }
        return(df)
    })
```

###

-------------------------------------
```{r geom}
  fluidRow(tags$style(mycss), span(class = "one_row"
           , column(6, 
                    selectInput('chart_type', 'Chart Type', 
                                choices = c("geom_count", "geom_point", "geom_bar", "geom_line"))
           )
           )
  )
```

###

-------------------------------------
```{r x}
  fluidRow(tags$style(mycss), span(class = "one_row"
           , column(6,
                    renderUI({
                        selectInput('x', 'X', get_colnames()[1], 
                                   choices = c(Choose = ".", get_colnames()))
                    })
                    )
           , column(6, textInput('text_x', 'Custom X'))))
```


###

-------------------------------------
```{r y}
  fluidRow(tags$style(mycss), span(class = "one_row"
           , column(6, renderUI({
                        selectInput('y', 'Y', get_colnames()[2], 
                                   choices = c(Choose = ".", get_colnames()))
                    })
           )
           , column(6, textInput('text_y', "Custom Y"))))
```

###

-------------------------------------
```{r color}
  fluidRow(tags$style(mycss), span(class = "one_row"
           , column(6, 
                    renderUI({
                        selectInput('color', 'Color', NULL, 
                                   choices = c(Choose = ".", get_colnames()))
                    })
                    )
           , column(6, textInput('text_c', "Custom Color"))))
```

###

-------------------------------------
```{r fill}
##### Fill
  fluidRow(tags$style(mycss), span(class = "one_row"
         , column(6,
                  renderUI({
                        selectInput('fill', 'Fill', NULL, 
                                   choices = c(Choose = ".", get_colnames()))
                      })
                  )
         , column(6, textInput('text_f', "Custom Fill"))))
```

###

-------------------------------------
```{r facet_row}
##### Facet Row 
  fluidRow(tags$style(mycss), span(class = "one_row"
           , column(6, 
                    renderUI({
                        selectInput('facet_row', 'Facet Row', NULL, 
                                   choices = c(Choose = ".", get_colnames()))
                        })
                    )
           , column(6, textInput('text_fr', "Custom Facet Row"))))
```

###

-------------------------------------
```{r facet_col}
##### Facet Col
  fluidRow(tags$style(mycss), span(class = "one_row"
           , column(6, 
                    renderUI({
                        selectInput('facet_col', 'Facet Column', NULL, 
                                   choices = c(Choose = ".", get_colnames()))
                        })
                    )
           , column(6, textInput('text_fc', "Custom Facet Column"))))
```

###

-------------------------------------
```{r checkboxes}
fluidRow(tags$style(mycss), span(class = "checkboxes"
         , checkboxInput('show_x_axis', 'Hide Labels - X')
         , checkboxInput('smooth', 'Smooth', value = F)))

fluidRow(tags$style(mycss), span(class = "checkboxes"
        , checkboxInput('show_y_axis', 'Hide Labels - Y')
        , checkboxInput('jitter', 'Jitter', value = F)))

fluidRow(tags$style(mycss), span(class = "checkboxes",
         checkboxInput('coord', 'Coord Flip')))

```


Column {.tabset}
-------------------------------------
###ggplot
```{r get_plot}
renderPlot({

    p <- 
        ggplot(get_data()) +
        get(get_geom())()

    if (get_x() != '.')  p <- p + aes_string(x = eval(get_x()))
    if (get_y() != '.')  p <- p + aes_string(y = eval(get_y()))
    if (get_c() != '.')  p <- p + aes_string(color = eval(get_c()))
    if (get_f() != '.')  p <- p + aes_string(fill = eval(get_f()))

    facets <- paste(get_fr(), '~', get_fc())
    if (facets != '. ~ .')  p <- p + facet_grid(facets, scales = "free", space = "free")

    if (input$jitter)       p <- p + geom_jitter()
    if (input$smooth)       p <- p + geom_smooth()
    if (input$coord)        p <- p + coord_flip()
    if (get_geom() == 'geom_col') p <- p + labs(y = paste0('sum of ', get_y()))
    if(input$show_x_axis){  
      show_x_text <- element_blank()
      show_x_tick <- element_blank()
    } else {  
      show_x_text <- element_text()
      show_x_tick <- element_line()}
    if(input$show_y_axis){  
      show_y_text <- element_blank()
      show_y_tick <- element_blank()
    } else {  
      show_y_text <- element_text()
      show_y_tick <- element_line()}
    
    p <-
      p +
      theme(axis.ticks.x = show_x_tick,
            axis.ticks.y = show_y_tick,
            axis.text.x = show_x_text,
            axis.text.y = show_y_text)
    print(p)
})

```

###code
```{r get_code}
fluidRow(tags$style(mycss), span(class = "courier_font"
  , htmlOutput("gg_call")))
```

```{r}
output$gg_call <- 
    renderText({
        HTML( 
           paste0('ggplot(',
              #
              ifelse(is.null(input$get_file), 'iris', 'df'),
              ') + <br>',
              get_geom(), '(',
              'aes(',
              paste0(ifelse(get_x() != '.', paste0('x = ', get_x()), ''),
                     ifelse(get_y() != '.', paste0(', y = ', get_y()), ''),
                     ifelse(get_c() != '.', paste0(', color = ', get_c()), ''),
                     ifelse(get_f() != '.', paste0(', fill = ', get_f()), '')),
              '))',
              ifelse(input$jitter, '+<br>geom_jitter()', ''),
              ifelse(facets() != '. ~ .',
                     paste0('+facet_grid(', facets(), ', scales = "free", space = "free")'), ''),
              ifelse(input$smooth, '+<br>geom_smooth()', ''),
              ifelse(input$coord, '+<br>coord_flip()', ''),
              ifelse(get_geom() == '+<br>geom_col',
                     paste0('+<br>labs(y = "sum of ', get_y(), '")'), ''),
              ifelse(input$show_x_axis | input$show_y_axis,
                     paste0('+<br>theme(',
                            ifelse(input$show_x_axis, 
                                   'axis.ticks.x = element_blank(), axis.text.x = element_blank()', ''),
                            ifelse(input$show_y_axis, 
                                   'axis.ticks.y = element_blank(), axis.text.y = element_blank()', ''),
                            ')', collapse = ","), "")
              )
         ) 
})

```


Details
=====================================

###
-------------------------------------

```{r get_table}
observe({
    output$get_table <- 
        renderDataTable({
            DT::datatable(get_data()
                          , extensions = c('Buttons',"FixedHeader", 'Scroller')
                          , filter = "top"
                          , options = list(
                                      dom = 'Bfrtip',
                                      deferRender = F,
                                      scrollY = 550,
                                      scroller = T,
                                      scrollX = T,
                                      fixedHeader = F,
                                      buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                                      lengthChange = F)
                          #, callback = JS("//hide column filters for the first two columns
                          #                $.each([0, 1], function(i, v) {
                          #                $('input.form-control').eq(v).hide()});")
                          )
        })
})

dataTableOutput("get_table")
```
